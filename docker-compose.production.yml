version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: projectdes-postgres
    restart: always
    environment:
      POSTGRES_DB: projectdes_academy_prod
      POSTGRES_USER: projectdes_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U projectdes_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - projectdes-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: projectdes-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - projectdes-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # API Application
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      args:
        NODE_ENV: production
    image: projectdes-api:latest
    container_name: projectdes-api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://projectdes_prod:${DB_PASSWORD}@postgres:5432/projectdes_academy_prod?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - ./apps/api/.env.production:/app/.env:ro
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    ports:
      - "127.0.0.1:5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - projectdes-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M

  # Web Application (Next.js)
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        NODE_ENV: production
    image: projectdes-web:latest
    container_name: projectdes-web
    restart: always
    depends_on:
      - api
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://api:5000
    volumes:
      - ./apps/web/.env.production:/app/.env:ro
      - web_cache:/app/.next/cache
    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - projectdes-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2'
          memory: 1.5G
        reservations:
          cpus: '1'
          memory: 768M

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: worker
    image: projectdes-worker:latest
    container_name: projectdes-worker
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      WORKER_TYPE: background
      DATABASE_URL: postgresql://projectdes_prod:${DB_PASSWORD}@postgres:5432/projectdes_academy_prod?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - ./apps/api/.env.production:/app/.env:ro
      - worker_logs:/app/logs
    networks:
      - projectdes-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: projectdes-nginx
    restart: always
    depends_on:
      - api
      - web
    volumes:
      - ./config/nginx/projectdes-academy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      - certbot_data:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - projectdes-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: projectdes-certbot
    volumes:
      - certbot_data:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - projectdes-network

  # Database Backup
  postgres-backup:
    image: postgres:15-alpine
    container_name: projectdes-backup
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts:ro
    entrypoint: ["/scripts/backup.sh"]
    networks:
      - projectdes-network
    deploy:
      replicas: 0
      restart_policy:
        condition: none

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: projectdes-prometheus
    restart: always
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - projectdes-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: projectdes-grafana
    restart: always
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:3001:3000"
    networks:
      - projectdes-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  projectdes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_uploads:
    driver: local
  web_cache:
    driver: local
  worker_logs:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  certbot_data:
    driver: local
  certbot_conf:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local